{"componentChunkName":"component---src-templates-docs-js","path":"/ssh-keys","result":{"data":{"site":{"siteMetadata":{"title":"Tech Particles: Raspberry","docsLocation":""}},"mdx":{"fields":{"id":"81c72aa1-90cd-501b-bc7e-7df8fd7f1e73","title":"Using SSH keys","slug":"/ssh-keys"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Using SSH keys\",\n  \"metaTitle\": \"\",\n  \"metaDescription\": \"\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Generate ssh keypair\"), mdx(\"h3\", null, \"Using windows\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Download PuttyGen;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Generate RSA keypair;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don't use password if you don't want to enter it;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Save public and private key;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Copy public key from window 'Public key for pasting into OpenSSH authorized_keys file';\")), mdx(\"h2\", null, \"Using linux\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Run ssh-keygen;\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"root@raspi:~# ssh-keygen\\nGenerating public/private rsa key pair.\\nEnter file in which to save the key (/root/.ssh/id_rsa):\\nCreated directory '/root/.ssh'.\\nEnter passphrase (empty for no passphrase):\\nEnter same passphrase again:\\nYour identification has been saved in /root/.ssh/id_rsa.\\nYour public key has been saved in /root/.ssh/id_rsa.pub.\\nThe key fingerprint is:\\nSHA256:UHqwV9123123123123123e28X07V1ODpIr5Vy+hpi1g\\nThe key's randomart image is:\\n...\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Your public key - cat ~/.ssh/id_rsa.pub;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Your private key - cat ~/.ssh/id_rsa;\")), mdx(\"h2\", null, \"Create user\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"root@raspi-3-3:~# adduser test\\nAdding user `test' ...\\nAdding new group `test' (1001) ...\\nAdding new user `test' (1001) with group `test' ...\\nCreating home directory `/home/test' ...\\nCopying files from `/etc/skel' ...\\nNew password:\\nRetype new password:\\npasswd: password updated successfully\\nChanging the user information for test\\nEnter the new value, or press ENTER for the default\\n        Full Name []: Test\\n        Room Number []:\\n        Work Phone []:\\n        Home Phone []:\\n        Other []:\\nIs the information correct? [Y/n] Y\\n\")), mdx(\"h3\", null, \"Adding sudo capability to user\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"usermod -aG sudo username\\n\")), mdx(\"h3\", null, \"Sudo without password\"), mdx(\"p\", null, \"Add line to /etc/sudoers:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"username     ALL=(ALL:ALL) ALL\\n\")), mdx(\"h3\", null, \"Create ssh directory\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"install -d -m 700 /home/test/.ssh\\n# copy authorized_keys or create it\\nsudo chmod 644 /home/test/.ssh/authorized_keys\\nsudo chown -R test:test /home/test/.ssh\\n\")), mdx(\"p\", null, \"Copy public key to authorized_keys file\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#generate-ssh-keypair","title":"Generate ssh keypair","items":[{"url":"#using-windows","title":"Using windows"}]},{"url":"#using-linux","title":"Using linux"},{"url":"#create-user","title":"Create user","items":[{"url":"#adding-sudo-capability-to-user","title":"Adding sudo capability to user"},{"url":"#sudo-without-password","title":"Sudo without password"},{"url":"#create-ssh-directory","title":"Create ssh directory"}]}]},"parent":{"__typename":"File","relativePath":"ssh-keys.md"},"frontmatter":{"metaTitle":"","metaDescription":""}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/camera","title":"Camera"}}},{"node":{"fields":{"slug":"/diagnostic","title":"Basic Diagnostic"}}},{"node":{"fields":{"slug":"/create-service","title":"Creating Service"}}},{"node":{"fields":{"slug":"/i2c","title":"I2C Config"}}},{"node":{"fields":{"slug":"/","title":"Introduction"}}},{"node":{"fields":{"slug":"/specifications","title":"Latest Raspberry Pi Specifications"}}},{"node":{"fields":{"slug":"/system-on-usb","title":"Booting images from usb"}}},{"node":{"fields":{"slug":"/python","title":"Python Commons"}}},{"node":{"fields":{"slug":"/init","title":"Init Settings"}}},{"node":{"fields":{"slug":"/ssh-keys","title":"Using SSH keys"}}},{"node":{"fields":{"slug":"/wifi","title":"Wi-fi"}}},{"node":{"fields":{"slug":"/useful-commands","title":"Useful commands"}}}]}},"pageContext":{"id":"81c72aa1-90cd-501b-bc7e-7df8fd7f1e73"}}}