{"componentChunkName":"component---src-templates-docs-js","path":"/create-service","result":{"data":{"site":{"siteMetadata":{"title":"Tech Particles: Raspberry","docsLocation":""}},"mdx":{"fields":{"id":"6e99675b-1bfd-5d4e-846d-9d59538837a1","title":"Creating Service","slug":"/create-service"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Creating Service\",\n  \"metaTitle\": \"\",\n  \"metaDescription\": \"\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"How to create service\"), mdx(\"h3\", null, \"Creating basic service\"), mdx(\"p\", null, \"Create service file my.service\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[Unit]\\nDescription=My service\\nAfter=network.target\\n\\n[Service]\\nExecStart=/usr/bin/python -u main.py\\nWorkingDirectory=/home/pi/myservice\\nStandardOutput=inherit\\nStandardError=inherit\\nRestart=always\\nUser=pi\\n\\n[Install]\\nWantedBy=multi-user.target\\n\")), mdx(\"p\", null, \"Copy service file to the /etc:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo cp my.service /etc/systemd/system/my.service\\n\")), mdx(\"p\", null, \"Update configuration:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo systemctl daemon-reload\\n\")), mdx(\"p\", null, \"Start service:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo systemctl start my.service\\n\")), mdx(\"p\", null, \"Stop service:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo systemctl stop my.service\\n\")), mdx(\"h3\", null, \"Start on a boot\"), mdx(\"p\", null, \"Enable service for starting on a boot\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo systemctl enable my.service\\n\")), mdx(\"p\", null, \"Check status:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo systemctl status my.service\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#how-to-create-service","title":"How to create service","items":[{"url":"#creating-basic-service","title":"Creating basic service"},{"url":"#start-on-a-boot","title":"Start on a boot"}]}]},"parent":{"__typename":"File","relativePath":"create-service.md"},"frontmatter":{"metaTitle":"","metaDescription":""}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/create-service","title":"Creating Service"}}},{"node":{"fields":{"slug":"/diagnostic","title":"Basic Diagnostic"}}},{"node":{"fields":{"slug":"/i2c","title":"I2C Config"}}},{"node":{"fields":{"slug":"/","title":"Introduction"}}},{"node":{"fields":{"slug":"/init","title":"Init Settings"}}},{"node":{"fields":{"slug":"/system-on-usb","title":"Booting images from usb"}}},{"node":{"fields":{"slug":"/python","title":"Python Commons"}}},{"node":{"fields":{"slug":"/specifications","title":"Latest Raspberry Pi Specifications"}}},{"node":{"fields":{"slug":"/useful-commands","title":"Useful commands"}}},{"node":{"fields":{"slug":"/wifi","title":"Wi-fi"}}}]}},"pageContext":{"id":"6e99675b-1bfd-5d4e-846d-9d59538837a1"}}}