{"componentChunkName":"component---src-templates-docs-js","path":"/camera","result":{"data":{"site":{"siteMetadata":{"title":"Tech Particles: Raspberry","docsLocation":""}},"mdx":{"fields":{"id":"bf42b509-a832-586e-8f29-a0de919f253c","title":"Camera","slug":"/camera"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Camera\",\n  \"metaTitle\": \"\",\n  \"metaDescription\": \"\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Installing camera\"), mdx(\"p\", null, \"Look for pictures, in text it is:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Look at the cable, find blue part, it must faces the USB ports.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CSI port is the nearest port to the USB ports;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If your camera not being connected to the cable, connectors side have to lay on the schema side;\")), mdx(\"h3\", null, \"Enabling CSI camera\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use console tool:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo raspi-config\\n\\n# Interfacing options -> camera -> enable\\n\\n# Reboot\\n\")), mdx(\"p\", null, \"and reboot. OR enable it by editing config.txt, add in the 'all' section:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"start_x=1\\ngpu_mem=256\\n\")), mdx(\"h3\", null, \"Disabling camera red LED\"), mdx(\"p\", null, \"Edit config.txt, add this in the 'all' section:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"disable_camera_led=1\\n\")), mdx(\"h3\", null, \"Camera diagnostic\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"pi@raspberry:~ $ vcgencmd get_camera\\nsupported=1 detected=1\\n\")), mdx(\"p\", null, \"If supported = 0, try updating firmware. If detected = 1 check camera connection.\"), mdx(\"h3\", null, \"Updating firmware\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo rpi-update\\n\")), mdx(\"h3\", null, \"Test camera from console\"), mdx(\"p\", null, \"Simple get image to file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"raspistill -o cam.jpg\\n\")), mdx(\"p\", null, \"Horizontal and vertical flip image:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"raspistill -vf -hf -o cam2.jpg\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#installing-camera","title":"Installing camera"},{"url":"#enabling-csi-camera","title":"Enabling CSI camera"},{"url":"#disabling-camera-red-led","title":"Disabling camera red LED"},{"url":"#camera-diagnostic","title":"Camera diagnostic"},{"url":"#updating-firmware","title":"Updating firmware"},{"url":"#test-camera-from-console","title":"Test camera from console"}]},"parent":{"__typename":"File","relativePath":"camera.md"},"frontmatter":{"metaTitle":"","metaDescription":""}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/create-service","title":"Creating Service"}}},{"node":{"fields":{"slug":"/diagnostic","title":"Basic Diagnostic"}}},{"node":{"fields":{"slug":"/https","title":"HTTPS with let's encrypt"}}},{"node":{"fields":{"slug":"/camera","title":"Camera"}}},{"node":{"fields":{"slug":"/i2c","title":"I2C Config"}}},{"node":{"fields":{"slug":"/","title":"Introduction"}}},{"node":{"fields":{"slug":"/init","title":"Init Settings"}}},{"node":{"fields":{"slug":"/python","title":"Python Commons"}}},{"node":{"fields":{"slug":"/ssh-keys","title":"Using SSH keys"}}},{"node":{"fields":{"slug":"/specifications","title":"Latest Raspberry Pi Specifications"}}},{"node":{"fields":{"slug":"/system-on-usb","title":"Booting images from usb"}}},{"node":{"fields":{"slug":"/useful-commands","title":"Useful commands"}}},{"node":{"fields":{"slug":"/wifi","title":"Wi-fi"}}}]}},"pageContext":{"id":"bf42b509-a832-586e-8f29-a0de919f253c"}}}