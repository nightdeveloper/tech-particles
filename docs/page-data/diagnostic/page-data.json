{"componentChunkName":"component---src-templates-docs-js","path":"/diagnostic","result":{"data":{"site":{"siteMetadata":{"title":"Tech Particles: Raspberry","docsLocation":""}},"mdx":{"fields":{"id":"e2581b64-1b2d-51bc-b36c-114f768f11c6","title":"Basic Diagnostic","slug":"/diagnostic"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Basic Diagnostic\",\n  \"metaTitle\": \"\",\n  \"metaDescription\": \"\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Determine debian version\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"pi@raspberrypi:~ $ cat /etc/debian_version\\n10.3\\n\")), mdx(\"h3\", null, \"Show kernel version\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"pi@raspberrypi:~ $ uname -a\\nLinux raspberrypi 4.19.97+ #1294 Thu Jan 30 13:10:54 GMT 2020 armv6l GNU/Linux\\n\")), mdx(\"h2\", null, \"Show hardware version\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"pi@raspberrypi:~ $ cat /proc/cpuinfo\\nprocessor       : 0\\nmodel name      : ARMv6-compatible processor rev 7 (v6l)\\nBogoMIPS        : 697.95\\nFeatures        : half thumb fastmult vfp edsp java tls\\nCPU implementer : 0x41\\nCPU architecture: 7\\nCPU variant     : 0x0\\nCPU part        : 0xb76\\nCPU revision    : 7\\n\\nHardware        : BCM2835\\nRevision        : 0010\\nSerial          : 0000000034b74d8f\\nModel           : Raspberry Pi Model B Plus Rev 1.2\\n\")), mdx(\"h2\", null, \"CPU info\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CPU frequency:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"pi@raspberrypi:~ $ vcgencmd measure_clock arm\\nfrequency(45)=700072000\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CPU Voltage:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"pi@raspberrypi:~ $ vcgencmd measure_volts\\nvolt=1.2000V\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Is CPU was under voltage and throttled now:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"pi@raspberrypi:~ $ vcgencmd get_throttled\\nthrottled=0x0\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Show CPU Temperature:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"pi@raspberrypi:~ $ cat /sys/class/thermal/thermal_zone0/temp\\n40622\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Show GPU Temparature:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"pi@raspberrypi:~ $ vcgencmd measure_temp\\ntemp=40.1'C\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Get total memory:\")), mdx(\"p\", null, \"GPU memory\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"vcgencmd get_mem gpu\\n\")), mdx(\"p\", null, \"CPU memory\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"vcgencmd get_mem arm\\n\")), mdx(\"h2\", null, \"Show boot messages\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Show kernel boot messages:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"dmesg\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Show boot time messages:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"vcdbg log msg\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#determine-debian-version","title":"Determine debian version"},{"url":"#show-kernel-version","title":"Show kernel version"}]},{"url":"#show-hardware-version","title":"Show hardware version"},{"url":"#cpu-info","title":"CPU info"},{"url":"#show-boot-messages","title":"Show boot messages"}]},"parent":{"__typename":"File","relativePath":"diagnostic.md"},"frontmatter":{"metaTitle":"","metaDescription":""}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/camera","title":"Camera"}}},{"node":{"fields":{"slug":"/diagnostic","title":"Basic Diagnostic"}}},{"node":{"fields":{"slug":"/create-service","title":"Creating Service"}}},{"node":{"fields":{"slug":"/i2c","title":"I2C Config"}}},{"node":{"fields":{"slug":"/","title":"Introduction"}}},{"node":{"fields":{"slug":"/specifications","title":"Latest Raspberry Pi Specifications"}}},{"node":{"fields":{"slug":"/system-on-usb","title":"Booting images from usb"}}},{"node":{"fields":{"slug":"/python","title":"Python Commons"}}},{"node":{"fields":{"slug":"/init","title":"Init Settings"}}},{"node":{"fields":{"slug":"/ssh-keys","title":"Using SSH keys"}}},{"node":{"fields":{"slug":"/wifi","title":"Wi-fi"}}},{"node":{"fields":{"slug":"/useful-commands","title":"Useful commands"}}}]}},"pageContext":{"id":"e2581b64-1b2d-51bc-b36c-114f768f11c6"}}}