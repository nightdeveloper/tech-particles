{"componentChunkName":"component---src-templates-docs-js","path":"/system-on-usb","result":{"data":{"site":{"siteMetadata":{"title":"Tech Particles: Raspberry","docsLocation":""}},"mdx":{"fields":{"id":"877265a4-5d8d-58bd-b1a9-97c6c3d9e1cd","title":"Booting images from usb","slug":"/system-on-usb"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Booting images from usb\",\n  \"metaTitle\": \"\",\n  \"metaDescription\": \"\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Why USB?\"), mdx(\"p\", null, \"Usb drives like external USB Flash / HDD / SSD are more long-term working devices, giving more speed, more stable.\"), mdx(\"h1\", null, \"What do we need?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SD card greater then 4Gb. Really we can use 512Mb+, but easier user 4GB+ (where can u find 512Mb Sd?..);\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Usb Flash (or any storage) 4Gb+ (I recommend 16/32Gb+ storage);\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Card reader with SD or microSD adapter for Raspberry Pi Card;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Free device with USB port;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Software to write image files to the external storage (Win32Imager / Usb Image Tool for Windows or any else;\"))), mdx(\"h1\", null, \"How we can do it?\"), mdx(\"p\", null, \"1) Download latest Raspbian image from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.google.com\"\n  }), \"official raspbian site\"), \";\"), mdx(\"p\", null, \"2) Write same raspbian image to SD card and USB device;\"), mdx(\"p\", null, \"3) Open SD card in file browser (first boot partition is FAT file system).\\nYou will see many files, we are interested in the cmdline.txt, default content is:\"), mdx(\"p\", null, \"console=serial0,115200 console=tty1 root=PARTUUID=738a4d67-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait quiet init=/usr/lib/raspi-config/init_resize.sh\"), mdx(\"p\", null, \"Modify parameters:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"init - we can do resize from usb boot partition, this parameter won't read from raspbian;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"quiet - we need additional info on boot for debug;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"root - remove hardcoded partition UUID, set USB partition name - /dev/sda2.\")), mdx(\"p\", null, \"Add parameters:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rootdelay=2 for additional compatibility for wi-fi device;\")), mdx(\"p\", null, \"4) Rename SD Card's volume name to 'USB-BOOT' (or any else other from BOOT);\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \" On boot raspberry has two devices - /dev/mmcblk0 for SD card device and /dev/sda for first USB devices. Digit 2\\nstands for second partition\")), mdx(\"h1\", null, \"What we can do else for finishing tuning?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"place empty file 'ssh' on the USB storage boot partition for permitting ssh access by default;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"place wpa_supplicant.conf in the same partition for auto-connecting to wi-fi network\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\\nupdate_config=1\\ncountry=US\\n\\nnetwork={\\n     ssid=\\\"network.name\\\"\\n     psk=\\\"plain.text.password\\\"\\n     key_mgmt=WPA-PSK\\n}\\n\")), mdx(\"h1\", null, \"My partitions are not at the whole USB stoarge size!\"), mdx(\"p\", null, \"Now we need resize root partition online:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"pi@raspberrypi:~ $ sudo parted /dev/sda\\n\\nGNU Parted 3.2\\nUsing /dev/sda\\nWelcome to GNU Parted! Type 'help' to view a list of commands.\\n(parted) *p*\\nModel: JetFlash Transcend 32GB (scsi)\\nDisk /dev/sda: 31.3GB\\nSector size (logical/physical): 512B/512B\\nPartition Table: msdos\\nDisk Flags:\\n\\nNumber  Start   End     Size    Type     File system  Flags\\n 1      4194kB  273MB   268MB   primary  fat32        lba\\n 2      273MB   1850MB  1577MB  primary  ext4\\n\\n(parted) *resizepart 2*\\nEnd?  [1850MB]? *31.3GB*\\n(parted) *p*\\nModel: JetFlash Transcend 32GB (scsi)\\nDisk /dev/sda: 31.3GB\\nSector size (logical/physical): 512B/512B\\nPartition Table: msdos\\nDisk Flags:\\n\\nNumber  Start   End     Size    Type     File system  Flags\\n 1      4194kB  273MB   268MB   primary  fat32        lba\\n 2      273MB   31.3GB  31.0GB  primary  ext4\\n\\n(parted) *quit*\\nInformation: You may need to update /etc/fstab.\\n\\n*pi@raspberrypi:~ $ resize2fs /dev/sda2*\\n\\nresize2fs 1.44.5 (15-Dec-2018)\\nopen: Permission denied while opening /dev/sda2\\npi@raspberrypi:~ $ sudo resize2fs /dev/sda2\\nresize2fs 1.44.5 (15-Dec-2018)\\nFilesystem at /dev/sda2 is mounted on /; on-line resizing required\\nold_desc_blocks = 1, new_desc_blocks = 2\\nThe filesystem on /dev/sda2 is now 7575040 (4k) blocks long.\\n\\npi@raspberrypi:~ $ df -h\\n\\nFilesystem      Size  Used Avail Use% Mounted on\\n/dev/root        29G  1.3G   27G   5% /\\ndevtmpfs        212M     0  212M   0% /dev\\ntmpfs           217M     0  217M   0% /dev/shm\\ntmpfs           217M  5.8M  211M   3% /run\\ntmpfs           5.0M  4.0K  5.0M   1% /run/lock\\ntmpfs           217M     0  217M   0% /sys/fs/cgroup\\n/dev/sda1       253M   53M  200M  21% /boot\\ntmpfs            44M     0   44M   0% /run/user/1000\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#why-usb","title":"Why USB?"},{"url":"#what-do-we-need","title":"What do we need?"},{"url":"#how-we-can-do-it","title":"How we can do it?"},{"url":"#what-we-can-do-else-for-finishing-tuning","title":"What we can do else for finishing tuning?"},{"url":"#my-partitions-are-not-at-the-whole-usb-stoarge-size","title":"My partitions are not at the whole USB stoarge size!"}]},"parent":{"relativePath":"system-on-usb.md"},"frontmatter":{"metaTitle":"","metaDescription":""}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Introduction"}}},{"node":{"fields":{"slug":"/wifi","title":"Wi-fi"}}},{"node":{"fields":{"slug":"/system-on-usb","title":"Booting images from usb"}}},{"node":{"fields":{"slug":"/specifications","title":"Latest Raspberry Pi Specifications"}}},{"node":{"fields":{"slug":"/diagnostic","title":"Basic Diagnostic"}}},{"node":{"fields":{"slug":"/create-service","title":"Creating Service"}}},{"node":{"fields":{"slug":"/init","title":"Init Settings"}}},{"node":{"fields":{"slug":"/i2c","title":"I2C Config"}}},{"node":{"fields":{"slug":"/python","title":"Python Commons"}}},{"node":{"fields":{"slug":"/useful-commands","title":"Useful commands"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"877265a4-5d8d-58bd-b1a9-97c6c3d9e1cd"}}}